// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: EquipmentManager.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "EquipmentManager.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace proto {

namespace {

const ::google::protobuf::Descriptor* Equipment_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Equipment_reflection_ = NULL;
struct EquipmentOneofInstance {
  const ::proto::Equipment_Treadmill* treadmill_;
  const ::proto::Equipment_RowingMachine* rowingmachine_;
}* Equipment_default_oneof_instance_ = NULL;
const ::google::protobuf::Descriptor* Equipment_Treadmill_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Equipment_Treadmill_reflection_ = NULL;
const ::google::protobuf::Descriptor* Equipment_RowingMachine_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Equipment_RowingMachine_reflection_ = NULL;
const ::google::protobuf::Descriptor* EquipmentCache_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  EquipmentCache_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_EquipmentManager_2eproto() {
  protobuf_AddDesc_EquipmentManager_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "EquipmentManager.proto");
  GOOGLE_CHECK(file != NULL);
  Equipment_descriptor_ = file->message_type(0);
  static const int Equipment_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Equipment, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Equipment, date_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Equipment, id_),
    PROTO2_GENERATED_DEFAULT_ONEOF_FIELD_OFFSET(Equipment_default_oneof_instance_, treadmill_),
    PROTO2_GENERATED_DEFAULT_ONEOF_FIELD_OFFSET(Equipment_default_oneof_instance_, rowingmachine_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Equipment, EquipmentType_),
  };
  Equipment_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Equipment_descriptor_,
      Equipment::default_instance_,
      Equipment_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Equipment, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Equipment, _unknown_fields_),
      -1,
      Equipment_default_oneof_instance_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Equipment, _oneof_case_[0]),
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Equipment));
  Equipment_Treadmill_descriptor_ = Equipment_descriptor_->nested_type(0);
  static const int Equipment_Treadmill_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Equipment_Treadmill, distance_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Equipment_Treadmill, avgspeed_),
  };
  Equipment_Treadmill_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Equipment_Treadmill_descriptor_,
      Equipment_Treadmill::default_instance_,
      Equipment_Treadmill_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Equipment_Treadmill, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Equipment_Treadmill, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Equipment_Treadmill));
  Equipment_RowingMachine_descriptor_ = Equipment_descriptor_->nested_type(1);
  static const int Equipment_RowingMachine_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Equipment_RowingMachine, duration_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Equipment_RowingMachine, repspermin_),
  };
  Equipment_RowingMachine_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Equipment_RowingMachine_descriptor_,
      Equipment_RowingMachine::default_instance_,
      Equipment_RowingMachine_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Equipment_RowingMachine, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Equipment_RowingMachine, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Equipment_RowingMachine));
  EquipmentCache_descriptor_ = file->message_type(1);
  static const int EquipmentCache_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EquipmentCache, equipment_),
  };
  EquipmentCache_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      EquipmentCache_descriptor_,
      EquipmentCache::default_instance_,
      EquipmentCache_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EquipmentCache, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EquipmentCache, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(EquipmentCache));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_EquipmentManager_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Equipment_descriptor_, &Equipment::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Equipment_Treadmill_descriptor_, &Equipment_Treadmill::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Equipment_RowingMachine_descriptor_, &Equipment_RowingMachine::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    EquipmentCache_descriptor_, &EquipmentCache::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_EquipmentManager_2eproto() {
  delete Equipment::default_instance_;
  delete Equipment_default_oneof_instance_;
  delete Equipment_reflection_;
  delete Equipment_Treadmill::default_instance_;
  delete Equipment_Treadmill_reflection_;
  delete Equipment_RowingMachine::default_instance_;
  delete Equipment_RowingMachine_reflection_;
  delete EquipmentCache::default_instance_;
  delete EquipmentCache_reflection_;
}

void protobuf_AddDesc_EquipmentManager_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\026EquipmentManager.proto\022\005proto\"\226\002\n\tEqui"
    "pment\022\014\n\004name\030\001 \002(\t\022\014\n\004date\030\002 \002(\t\022\n\n\002id\030"
    "\003 \002(\005\022/\n\ttreadmill\030\004 \001(\0132\032.proto.Equipme"
    "nt.TreadmillH\000\0227\n\rrowingMachine\030\005 \001(\0132\036."
    "proto.Equipment.RowingMachineH\000\032/\n\tTread"
    "mill\022\020\n\010distance\030\001 \002(\002\022\020\n\010avgSpeed\030\002 \002(\002"
    "\0325\n\rRowingMachine\022\020\n\010duration\030\001 \002(\002\022\022\n\nr"
    "epsPerMin\030\002 \002(\002B\017\n\rEquipmentType\"5\n\016Equi"
    "pmentCache\022#\n\tequipment\030\001 \003(\0132\020.proto.Eq"
    "uipment", 367);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "EquipmentManager.proto", &protobuf_RegisterTypes);
  Equipment::default_instance_ = new Equipment();
  Equipment_default_oneof_instance_ = new EquipmentOneofInstance;
  Equipment_Treadmill::default_instance_ = new Equipment_Treadmill();
  Equipment_RowingMachine::default_instance_ = new Equipment_RowingMachine();
  EquipmentCache::default_instance_ = new EquipmentCache();
  Equipment::default_instance_->InitAsDefaultInstance();
  Equipment_Treadmill::default_instance_->InitAsDefaultInstance();
  Equipment_RowingMachine::default_instance_->InitAsDefaultInstance();
  EquipmentCache::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_EquipmentManager_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_EquipmentManager_2eproto {
  StaticDescriptorInitializer_EquipmentManager_2eproto() {
    protobuf_AddDesc_EquipmentManager_2eproto();
  }
} static_descriptor_initializer_EquipmentManager_2eproto_;

// ===================================================================

#ifndef _MSC_VER
const int Equipment_Treadmill::kDistanceFieldNumber;
const int Equipment_Treadmill::kAvgSpeedFieldNumber;
#endif  // !_MSC_VER

Equipment_Treadmill::Equipment_Treadmill()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.Equipment.Treadmill)
}

void Equipment_Treadmill::InitAsDefaultInstance() {
}

Equipment_Treadmill::Equipment_Treadmill(const Equipment_Treadmill& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:proto.Equipment.Treadmill)
}

void Equipment_Treadmill::SharedCtor() {
  _cached_size_ = 0;
  distance_ = 0;
  avgspeed_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Equipment_Treadmill::~Equipment_Treadmill() {
  // @@protoc_insertion_point(destructor:proto.Equipment.Treadmill)
  SharedDtor();
}

void Equipment_Treadmill::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Equipment_Treadmill::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Equipment_Treadmill::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Equipment_Treadmill_descriptor_;
}

const Equipment_Treadmill& Equipment_Treadmill::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_EquipmentManager_2eproto();
  return *default_instance_;
}

Equipment_Treadmill* Equipment_Treadmill::default_instance_ = NULL;

Equipment_Treadmill* Equipment_Treadmill::New() const {
  return new Equipment_Treadmill;
}

void Equipment_Treadmill::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<Equipment_Treadmill*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(distance_, avgspeed_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Equipment_Treadmill::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.Equipment.Treadmill)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required float distance = 1;
      case 1: {
        if (tag == 13) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &distance_)));
          set_has_distance();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(21)) goto parse_avgSpeed;
        break;
      }

      // required float avgSpeed = 2;
      case 2: {
        if (tag == 21) {
         parse_avgSpeed:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &avgspeed_)));
          set_has_avgspeed();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.Equipment.Treadmill)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.Equipment.Treadmill)
  return false;
#undef DO_
}

void Equipment_Treadmill::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.Equipment.Treadmill)
  // required float distance = 1;
  if (has_distance()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(1, this->distance(), output);
  }

  // required float avgSpeed = 2;
  if (has_avgspeed()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(2, this->avgspeed(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.Equipment.Treadmill)
}

::google::protobuf::uint8* Equipment_Treadmill::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.Equipment.Treadmill)
  // required float distance = 1;
  if (has_distance()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(1, this->distance(), target);
  }

  // required float avgSpeed = 2;
  if (has_avgspeed()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(2, this->avgspeed(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.Equipment.Treadmill)
  return target;
}

int Equipment_Treadmill::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required float distance = 1;
    if (has_distance()) {
      total_size += 1 + 4;
    }

    // required float avgSpeed = 2;
    if (has_avgspeed()) {
      total_size += 1 + 4;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Equipment_Treadmill::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Equipment_Treadmill* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Equipment_Treadmill*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Equipment_Treadmill::MergeFrom(const Equipment_Treadmill& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_distance()) {
      set_distance(from.distance());
    }
    if (from.has_avgspeed()) {
      set_avgspeed(from.avgspeed());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Equipment_Treadmill::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Equipment_Treadmill::CopyFrom(const Equipment_Treadmill& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Equipment_Treadmill::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void Equipment_Treadmill::Swap(Equipment_Treadmill* other) {
  if (other != this) {
    std::swap(distance_, other->distance_);
    std::swap(avgspeed_, other->avgspeed_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Equipment_Treadmill::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Equipment_Treadmill_descriptor_;
  metadata.reflection = Equipment_Treadmill_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int Equipment_RowingMachine::kDurationFieldNumber;
const int Equipment_RowingMachine::kRepsPerMinFieldNumber;
#endif  // !_MSC_VER

Equipment_RowingMachine::Equipment_RowingMachine()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.Equipment.RowingMachine)
}

void Equipment_RowingMachine::InitAsDefaultInstance() {
}

Equipment_RowingMachine::Equipment_RowingMachine(const Equipment_RowingMachine& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:proto.Equipment.RowingMachine)
}

void Equipment_RowingMachine::SharedCtor() {
  _cached_size_ = 0;
  duration_ = 0;
  repspermin_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Equipment_RowingMachine::~Equipment_RowingMachine() {
  // @@protoc_insertion_point(destructor:proto.Equipment.RowingMachine)
  SharedDtor();
}

void Equipment_RowingMachine::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Equipment_RowingMachine::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Equipment_RowingMachine::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Equipment_RowingMachine_descriptor_;
}

const Equipment_RowingMachine& Equipment_RowingMachine::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_EquipmentManager_2eproto();
  return *default_instance_;
}

Equipment_RowingMachine* Equipment_RowingMachine::default_instance_ = NULL;

Equipment_RowingMachine* Equipment_RowingMachine::New() const {
  return new Equipment_RowingMachine;
}

void Equipment_RowingMachine::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<Equipment_RowingMachine*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(duration_, repspermin_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Equipment_RowingMachine::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.Equipment.RowingMachine)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required float duration = 1;
      case 1: {
        if (tag == 13) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &duration_)));
          set_has_duration();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(21)) goto parse_repsPerMin;
        break;
      }

      // required float repsPerMin = 2;
      case 2: {
        if (tag == 21) {
         parse_repsPerMin:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &repspermin_)));
          set_has_repspermin();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.Equipment.RowingMachine)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.Equipment.RowingMachine)
  return false;
#undef DO_
}

void Equipment_RowingMachine::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.Equipment.RowingMachine)
  // required float duration = 1;
  if (has_duration()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(1, this->duration(), output);
  }

  // required float repsPerMin = 2;
  if (has_repspermin()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(2, this->repspermin(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.Equipment.RowingMachine)
}

::google::protobuf::uint8* Equipment_RowingMachine::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.Equipment.RowingMachine)
  // required float duration = 1;
  if (has_duration()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(1, this->duration(), target);
  }

  // required float repsPerMin = 2;
  if (has_repspermin()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(2, this->repspermin(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.Equipment.RowingMachine)
  return target;
}

int Equipment_RowingMachine::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required float duration = 1;
    if (has_duration()) {
      total_size += 1 + 4;
    }

    // required float repsPerMin = 2;
    if (has_repspermin()) {
      total_size += 1 + 4;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Equipment_RowingMachine::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Equipment_RowingMachine* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Equipment_RowingMachine*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Equipment_RowingMachine::MergeFrom(const Equipment_RowingMachine& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_duration()) {
      set_duration(from.duration());
    }
    if (from.has_repspermin()) {
      set_repspermin(from.repspermin());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Equipment_RowingMachine::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Equipment_RowingMachine::CopyFrom(const Equipment_RowingMachine& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Equipment_RowingMachine::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void Equipment_RowingMachine::Swap(Equipment_RowingMachine* other) {
  if (other != this) {
    std::swap(duration_, other->duration_);
    std::swap(repspermin_, other->repspermin_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Equipment_RowingMachine::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Equipment_RowingMachine_descriptor_;
  metadata.reflection = Equipment_RowingMachine_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int Equipment::kNameFieldNumber;
const int Equipment::kDateFieldNumber;
const int Equipment::kIdFieldNumber;
const int Equipment::kTreadmillFieldNumber;
const int Equipment::kRowingMachineFieldNumber;
#endif  // !_MSC_VER

Equipment::Equipment()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.Equipment)
}

void Equipment::InitAsDefaultInstance() {
  Equipment_default_oneof_instance_->treadmill_ = const_cast< ::proto::Equipment_Treadmill*>(&::proto::Equipment_Treadmill::default_instance());
  Equipment_default_oneof_instance_->rowingmachine_ = const_cast< ::proto::Equipment_RowingMachine*>(&::proto::Equipment_RowingMachine::default_instance());
}

Equipment::Equipment(const Equipment& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:proto.Equipment)
}

void Equipment::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  date_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  id_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  clear_has_EquipmentType();
}

Equipment::~Equipment() {
  // @@protoc_insertion_point(destructor:proto.Equipment)
  SharedDtor();
}

void Equipment::SharedDtor() {
  if (name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete name_;
  }
  if (date_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete date_;
  }
  if (has_EquipmentType()) {
    clear_EquipmentType();
  }
  if (this != default_instance_) {
  }
}

void Equipment::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Equipment::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Equipment_descriptor_;
}

const Equipment& Equipment::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_EquipmentManager_2eproto();
  return *default_instance_;
}

Equipment* Equipment::default_instance_ = NULL;

Equipment* Equipment::New() const {
  return new Equipment;
}

void Equipment::clear_EquipmentType() {
  switch(EquipmentType_case()) {
    case kTreadmill: {
      delete EquipmentType_.treadmill_;
      break;
    }
    case kRowingMachine: {
      delete EquipmentType_.rowingmachine_;
      break;
    }
    case EQUIPMENTTYPE_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = EQUIPMENTTYPE_NOT_SET;
}


void Equipment::Clear() {
  if (_has_bits_[0 / 32] & 7) {
    if (has_name()) {
      if (name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        name_->clear();
      }
    }
    if (has_date()) {
      if (date_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        date_->clear();
      }
    }
    id_ = 0;
  }
  clear_EquipmentType();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Equipment::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.Equipment)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string name = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "name");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_date;
        break;
      }

      // required string date = 2;
      case 2: {
        if (tag == 18) {
         parse_date:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_date()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->date().data(), this->date().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "date");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_id;
        break;
      }

      // required int32 id = 3;
      case 3: {
        if (tag == 24) {
         parse_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_treadmill;
        break;
      }

      // optional .proto.Equipment.Treadmill treadmill = 4;
      case 4: {
        if (tag == 34) {
         parse_treadmill:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_treadmill()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_rowingMachine;
        break;
      }

      // optional .proto.Equipment.RowingMachine rowingMachine = 5;
      case 5: {
        if (tag == 42) {
         parse_rowingMachine:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_rowingmachine()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.Equipment)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.Equipment)
  return false;
#undef DO_
}

void Equipment::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.Equipment)
  // required string name = 1;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->name(), output);
  }

  // required string date = 2;
  if (has_date()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->date().data(), this->date().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "date");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->date(), output);
  }

  // required int32 id = 3;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->id(), output);
  }

  // optional .proto.Equipment.Treadmill treadmill = 4;
  if (has_treadmill()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->treadmill(), output);
  }

  // optional .proto.Equipment.RowingMachine rowingMachine = 5;
  if (has_rowingmachine()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->rowingmachine(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.Equipment)
}

::google::protobuf::uint8* Equipment::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.Equipment)
  // required string name = 1;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->name(), target);
  }

  // required string date = 2;
  if (has_date()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->date().data(), this->date().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "date");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->date(), target);
  }

  // required int32 id = 3;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->id(), target);
  }

  // optional .proto.Equipment.Treadmill treadmill = 4;
  if (has_treadmill()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->treadmill(), target);
  }

  // optional .proto.Equipment.RowingMachine rowingMachine = 5;
  if (has_rowingmachine()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        5, this->rowingmachine(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.Equipment)
  return target;
}

int Equipment::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string name = 1;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }

    // required string date = 2;
    if (has_date()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->date());
    }

    // required int32 id = 3;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->id());
    }

  }
  switch (EquipmentType_case()) {
    // optional .proto.Equipment.Treadmill treadmill = 4;
    case kTreadmill: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->treadmill());
      break;
    }
    // optional .proto.Equipment.RowingMachine rowingMachine = 5;
    case kRowingMachine: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->rowingmachine());
      break;
    }
    case EQUIPMENTTYPE_NOT_SET: {
      break;
    }
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Equipment::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Equipment* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Equipment*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Equipment::MergeFrom(const Equipment& from) {
  GOOGLE_CHECK_NE(&from, this);
  switch (from.EquipmentType_case()) {
    case kTreadmill: {
      mutable_treadmill()->::proto::Equipment_Treadmill::MergeFrom(from.treadmill());
      break;
    }
    case kRowingMachine: {
      mutable_rowingmachine()->::proto::Equipment_RowingMachine::MergeFrom(from.rowingmachine());
      break;
    }
    case EQUIPMENTTYPE_NOT_SET: {
      break;
    }
  }
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_name()) {
      set_name(from.name());
    }
    if (from.has_date()) {
      set_date(from.date());
    }
    if (from.has_id()) {
      set_id(from.id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Equipment::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Equipment::CopyFrom(const Equipment& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Equipment::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;

  if (has_treadmill()) {
    if (!this->treadmill().IsInitialized()) return false;
  }
  if (has_rowingmachine()) {
    if (!this->rowingmachine().IsInitialized()) return false;
  }
  return true;
}

void Equipment::Swap(Equipment* other) {
  if (other != this) {
    std::swap(name_, other->name_);
    std::swap(date_, other->date_);
    std::swap(id_, other->id_);
    std::swap(EquipmentType_, other->EquipmentType_);
    std::swap(_oneof_case_[0], other->_oneof_case_[0]);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Equipment::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Equipment_descriptor_;
  metadata.reflection = Equipment_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int EquipmentCache::kEquipmentFieldNumber;
#endif  // !_MSC_VER

EquipmentCache::EquipmentCache()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.EquipmentCache)
}

void EquipmentCache::InitAsDefaultInstance() {
}

EquipmentCache::EquipmentCache(const EquipmentCache& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:proto.EquipmentCache)
}

void EquipmentCache::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

EquipmentCache::~EquipmentCache() {
  // @@protoc_insertion_point(destructor:proto.EquipmentCache)
  SharedDtor();
}

void EquipmentCache::SharedDtor() {
  if (this != default_instance_) {
  }
}

void EquipmentCache::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* EquipmentCache::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return EquipmentCache_descriptor_;
}

const EquipmentCache& EquipmentCache::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_EquipmentManager_2eproto();
  return *default_instance_;
}

EquipmentCache* EquipmentCache::default_instance_ = NULL;

EquipmentCache* EquipmentCache::New() const {
  return new EquipmentCache;
}

void EquipmentCache::Clear() {
  equipment_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool EquipmentCache::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.EquipmentCache)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .proto.Equipment equipment = 1;
      case 1: {
        if (tag == 10) {
         parse_equipment:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_equipment()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(10)) goto parse_equipment;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.EquipmentCache)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.EquipmentCache)
  return false;
#undef DO_
}

void EquipmentCache::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.EquipmentCache)
  // repeated .proto.Equipment equipment = 1;
  for (int i = 0; i < this->equipment_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->equipment(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.EquipmentCache)
}

::google::protobuf::uint8* EquipmentCache::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.EquipmentCache)
  // repeated .proto.Equipment equipment = 1;
  for (int i = 0; i < this->equipment_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->equipment(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.EquipmentCache)
  return target;
}

int EquipmentCache::ByteSize() const {
  int total_size = 0;

  // repeated .proto.Equipment equipment = 1;
  total_size += 1 * this->equipment_size();
  for (int i = 0; i < this->equipment_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->equipment(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void EquipmentCache::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const EquipmentCache* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const EquipmentCache*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void EquipmentCache::MergeFrom(const EquipmentCache& from) {
  GOOGLE_CHECK_NE(&from, this);
  equipment_.MergeFrom(from.equipment_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void EquipmentCache::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void EquipmentCache::CopyFrom(const EquipmentCache& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool EquipmentCache::IsInitialized() const {

  if (!::google::protobuf::internal::AllAreInitialized(this->equipment())) return false;
  return true;
}

void EquipmentCache::Swap(EquipmentCache* other) {
  if (other != this) {
    equipment_.Swap(&other->equipment_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata EquipmentCache::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = EquipmentCache_descriptor_;
  metadata.reflection = EquipmentCache_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace proto

// @@protoc_insertion_point(global_scope)
