// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: EquipmentManager.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "EquipmentManager.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace proto {

namespace {

const ::google::protobuf::Descriptor* Equipment_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Equipment_reflection_ = NULL;
struct EquipmentOneofInstance {
  const ::proto::Equipment_Treadmill* treadmill_;
  const ::proto::Equipment_RowingMachine* rowingmachine_;
}* Equipment_default_oneof_instance_ = NULL;
const ::google::protobuf::Descriptor* Equipment_Treadmill_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Equipment_Treadmill_reflection_ = NULL;
const ::google::protobuf::Descriptor* Equipment_RowingMachine_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Equipment_RowingMachine_reflection_ = NULL;
const ::google::protobuf::Descriptor* EquipmentCache_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  EquipmentCache_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_EquipmentManager_2eproto() {
  protobuf_AddDesc_EquipmentManager_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "EquipmentManager.proto");
  GOOGLE_CHECK(file != NULL);
  Equipment_descriptor_ = file->message_type(0);
  static const int Equipment_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Equipment, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Equipment, date_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Equipment, id_),
    PROTO2_GENERATED_DEFAULT_ONEOF_FIELD_OFFSET(Equipment_default_oneof_instance_, treadmill_),
    PROTO2_GENERATED_DEFAULT_ONEOF_FIELD_OFFSET(Equipment_default_oneof_instance_, rowingmachine_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Equipment, EquipmentType_),
  };
  Equipment_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      Equipment_descriptor_,
      Equipment::default_instance_,
      Equipment_offsets_,
      -1,
      -1,
      -1,
      Equipment_default_oneof_instance_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Equipment, _oneof_case_[0]),
      sizeof(Equipment),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Equipment, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Equipment, _is_default_instance_));
  Equipment_Treadmill_descriptor_ = Equipment_descriptor_->nested_type(0);
  static const int Equipment_Treadmill_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Equipment_Treadmill, distance_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Equipment_Treadmill, avgspeed_),
  };
  Equipment_Treadmill_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      Equipment_Treadmill_descriptor_,
      Equipment_Treadmill::default_instance_,
      Equipment_Treadmill_offsets_,
      -1,
      -1,
      -1,
      sizeof(Equipment_Treadmill),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Equipment_Treadmill, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Equipment_Treadmill, _is_default_instance_));
  Equipment_RowingMachine_descriptor_ = Equipment_descriptor_->nested_type(1);
  static const int Equipment_RowingMachine_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Equipment_RowingMachine, duration_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Equipment_RowingMachine, repspermin_),
  };
  Equipment_RowingMachine_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      Equipment_RowingMachine_descriptor_,
      Equipment_RowingMachine::default_instance_,
      Equipment_RowingMachine_offsets_,
      -1,
      -1,
      -1,
      sizeof(Equipment_RowingMachine),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Equipment_RowingMachine, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Equipment_RowingMachine, _is_default_instance_));
  EquipmentCache_descriptor_ = file->message_type(1);
  static const int EquipmentCache_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EquipmentCache, equipment_),
  };
  EquipmentCache_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      EquipmentCache_descriptor_,
      EquipmentCache::default_instance_,
      EquipmentCache_offsets_,
      -1,
      -1,
      -1,
      sizeof(EquipmentCache),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EquipmentCache, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EquipmentCache, _is_default_instance_));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_EquipmentManager_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      Equipment_descriptor_, &Equipment::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      Equipment_Treadmill_descriptor_, &Equipment_Treadmill::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      Equipment_RowingMachine_descriptor_, &Equipment_RowingMachine::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      EquipmentCache_descriptor_, &EquipmentCache::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_EquipmentManager_2eproto() {
  delete Equipment::default_instance_;
  delete Equipment_default_oneof_instance_;
  delete Equipment_reflection_;
  delete Equipment_Treadmill::default_instance_;
  delete Equipment_Treadmill_reflection_;
  delete Equipment_RowingMachine::default_instance_;
  delete Equipment_RowingMachine_reflection_;
  delete EquipmentCache::default_instance_;
  delete EquipmentCache_reflection_;
}

void protobuf_AddDesc_EquipmentManager_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\026EquipmentManager.proto\022\005proto\"\226\002\n\tEqui"
    "pment\022\014\n\004name\030\001 \001(\t\022\014\n\004date\030\002 \001(\t\022\n\n\002id\030"
    "\003 \001(\005\022/\n\ttreadmill\030\004 \001(\0132\032.proto.Equipme"
    "nt.TreadmillH\000\0227\n\rrowingMachine\030\005 \001(\0132\036."
    "proto.Equipment.RowingMachineH\000\032/\n\tTread"
    "mill\022\020\n\010distance\030\001 \001(\002\022\020\n\010avgSpeed\030\002 \001(\002"
    "\0325\n\rRowingMachine\022\020\n\010duration\030\001 \001(\002\022\022\n\nr"
    "epsPerMin\030\002 \001(\002B\017\n\rEquipmentType\"5\n\016Equi"
    "pmentCache\022#\n\tequipment\030\001 \003(\0132\020.proto.Eq"
    "uipmentb\006proto3", 375);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "EquipmentManager.proto", &protobuf_RegisterTypes);
  Equipment::default_instance_ = new Equipment();
  Equipment_default_oneof_instance_ = new EquipmentOneofInstance();
  Equipment_Treadmill::default_instance_ = new Equipment_Treadmill();
  Equipment_RowingMachine::default_instance_ = new Equipment_RowingMachine();
  EquipmentCache::default_instance_ = new EquipmentCache();
  Equipment::default_instance_->InitAsDefaultInstance();
  Equipment_Treadmill::default_instance_->InitAsDefaultInstance();
  Equipment_RowingMachine::default_instance_->InitAsDefaultInstance();
  EquipmentCache::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_EquipmentManager_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_EquipmentManager_2eproto {
  StaticDescriptorInitializer_EquipmentManager_2eproto() {
    protobuf_AddDesc_EquipmentManager_2eproto();
  }
} static_descriptor_initializer_EquipmentManager_2eproto_;

namespace {

static void MergeFromFail(int line) GOOGLE_ATTRIBUTE_COLD;
static void MergeFromFail(int line) {
  GOOGLE_CHECK(false) << __FILE__ << ":" << line;
}

}  // namespace


// ===================================================================

#ifndef _MSC_VER
const int Equipment_Treadmill::kDistanceFieldNumber;
const int Equipment_Treadmill::kAvgSpeedFieldNumber;
#endif  // !_MSC_VER

Equipment_Treadmill::Equipment_Treadmill()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.Equipment.Treadmill)
}

void Equipment_Treadmill::InitAsDefaultInstance() {
  _is_default_instance_ = true;
}

Equipment_Treadmill::Equipment_Treadmill(const Equipment_Treadmill& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:proto.Equipment.Treadmill)
}

void Equipment_Treadmill::SharedCtor() {
    _is_default_instance_ = false;
  _cached_size_ = 0;
  distance_ = 0;
  avgspeed_ = 0;
}

Equipment_Treadmill::~Equipment_Treadmill() {
  // @@protoc_insertion_point(destructor:proto.Equipment.Treadmill)
  SharedDtor();
}

void Equipment_Treadmill::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Equipment_Treadmill::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Equipment_Treadmill::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Equipment_Treadmill_descriptor_;
}

const Equipment_Treadmill& Equipment_Treadmill::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_EquipmentManager_2eproto();
  return *default_instance_;
}

Equipment_Treadmill* Equipment_Treadmill::default_instance_ = NULL;

Equipment_Treadmill* Equipment_Treadmill::New(::google::protobuf::Arena* arena) const {
  Equipment_Treadmill* n = new Equipment_Treadmill;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Equipment_Treadmill::Clear() {
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<Equipment_Treadmill*>(16)->f)

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  ZR_(distance_, avgspeed_);

#undef ZR_HELPER_
#undef ZR_

}

bool Equipment_Treadmill::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.Equipment.Treadmill)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional float distance = 1;
      case 1: {
        if (tag == 13) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &distance_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(21)) goto parse_avgSpeed;
        break;
      }

      // optional float avgSpeed = 2;
      case 2: {
        if (tag == 21) {
         parse_avgSpeed:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &avgspeed_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.Equipment.Treadmill)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.Equipment.Treadmill)
  return false;
#undef DO_
}

void Equipment_Treadmill::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.Equipment.Treadmill)
  // optional float distance = 1;
  if (this->distance() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(1, this->distance(), output);
  }

  // optional float avgSpeed = 2;
  if (this->avgspeed() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(2, this->avgspeed(), output);
  }

  // @@protoc_insertion_point(serialize_end:proto.Equipment.Treadmill)
}

::google::protobuf::uint8* Equipment_Treadmill::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.Equipment.Treadmill)
  // optional float distance = 1;
  if (this->distance() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(1, this->distance(), target);
  }

  // optional float avgSpeed = 2;
  if (this->avgspeed() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(2, this->avgspeed(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:proto.Equipment.Treadmill)
  return target;
}

int Equipment_Treadmill::ByteSize() const {
  int total_size = 0;

  // optional float distance = 1;
  if (this->distance() != 0) {
    total_size += 1 + 4;
  }

  // optional float avgSpeed = 2;
  if (this->avgspeed() != 0) {
    total_size += 1 + 4;
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Equipment_Treadmill::MergeFrom(const ::google::protobuf::Message& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const Equipment_Treadmill* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const Equipment_Treadmill>(
          &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Equipment_Treadmill::MergeFrom(const Equipment_Treadmill& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  if (from.distance() != 0) {
    set_distance(from.distance());
  }
  if (from.avgspeed() != 0) {
    set_avgspeed(from.avgspeed());
  }
}

void Equipment_Treadmill::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Equipment_Treadmill::CopyFrom(const Equipment_Treadmill& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Equipment_Treadmill::IsInitialized() const {

  return true;
}

void Equipment_Treadmill::Swap(Equipment_Treadmill* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Equipment_Treadmill::InternalSwap(Equipment_Treadmill* other) {
  std::swap(distance_, other->distance_);
  std::swap(avgspeed_, other->avgspeed_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Equipment_Treadmill::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Equipment_Treadmill_descriptor_;
  metadata.reflection = Equipment_Treadmill_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int Equipment_RowingMachine::kDurationFieldNumber;
const int Equipment_RowingMachine::kRepsPerMinFieldNumber;
#endif  // !_MSC_VER

Equipment_RowingMachine::Equipment_RowingMachine()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.Equipment.RowingMachine)
}

void Equipment_RowingMachine::InitAsDefaultInstance() {
  _is_default_instance_ = true;
}

Equipment_RowingMachine::Equipment_RowingMachine(const Equipment_RowingMachine& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:proto.Equipment.RowingMachine)
}

void Equipment_RowingMachine::SharedCtor() {
    _is_default_instance_ = false;
  _cached_size_ = 0;
  duration_ = 0;
  repspermin_ = 0;
}

Equipment_RowingMachine::~Equipment_RowingMachine() {
  // @@protoc_insertion_point(destructor:proto.Equipment.RowingMachine)
  SharedDtor();
}

void Equipment_RowingMachine::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Equipment_RowingMachine::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Equipment_RowingMachine::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Equipment_RowingMachine_descriptor_;
}

const Equipment_RowingMachine& Equipment_RowingMachine::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_EquipmentManager_2eproto();
  return *default_instance_;
}

Equipment_RowingMachine* Equipment_RowingMachine::default_instance_ = NULL;

Equipment_RowingMachine* Equipment_RowingMachine::New(::google::protobuf::Arena* arena) const {
  Equipment_RowingMachine* n = new Equipment_RowingMachine;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Equipment_RowingMachine::Clear() {
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<Equipment_RowingMachine*>(16)->f)

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  ZR_(duration_, repspermin_);

#undef ZR_HELPER_
#undef ZR_

}

bool Equipment_RowingMachine::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.Equipment.RowingMachine)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional float duration = 1;
      case 1: {
        if (tag == 13) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &duration_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(21)) goto parse_repsPerMin;
        break;
      }

      // optional float repsPerMin = 2;
      case 2: {
        if (tag == 21) {
         parse_repsPerMin:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &repspermin_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.Equipment.RowingMachine)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.Equipment.RowingMachine)
  return false;
#undef DO_
}

void Equipment_RowingMachine::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.Equipment.RowingMachine)
  // optional float duration = 1;
  if (this->duration() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(1, this->duration(), output);
  }

  // optional float repsPerMin = 2;
  if (this->repspermin() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(2, this->repspermin(), output);
  }

  // @@protoc_insertion_point(serialize_end:proto.Equipment.RowingMachine)
}

::google::protobuf::uint8* Equipment_RowingMachine::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.Equipment.RowingMachine)
  // optional float duration = 1;
  if (this->duration() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(1, this->duration(), target);
  }

  // optional float repsPerMin = 2;
  if (this->repspermin() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(2, this->repspermin(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:proto.Equipment.RowingMachine)
  return target;
}

int Equipment_RowingMachine::ByteSize() const {
  int total_size = 0;

  // optional float duration = 1;
  if (this->duration() != 0) {
    total_size += 1 + 4;
  }

  // optional float repsPerMin = 2;
  if (this->repspermin() != 0) {
    total_size += 1 + 4;
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Equipment_RowingMachine::MergeFrom(const ::google::protobuf::Message& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const Equipment_RowingMachine* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const Equipment_RowingMachine>(
          &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Equipment_RowingMachine::MergeFrom(const Equipment_RowingMachine& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  if (from.duration() != 0) {
    set_duration(from.duration());
  }
  if (from.repspermin() != 0) {
    set_repspermin(from.repspermin());
  }
}

void Equipment_RowingMachine::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Equipment_RowingMachine::CopyFrom(const Equipment_RowingMachine& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Equipment_RowingMachine::IsInitialized() const {

  return true;
}

void Equipment_RowingMachine::Swap(Equipment_RowingMachine* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Equipment_RowingMachine::InternalSwap(Equipment_RowingMachine* other) {
  std::swap(duration_, other->duration_);
  std::swap(repspermin_, other->repspermin_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Equipment_RowingMachine::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Equipment_RowingMachine_descriptor_;
  metadata.reflection = Equipment_RowingMachine_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int Equipment::kNameFieldNumber;
const int Equipment::kDateFieldNumber;
const int Equipment::kIdFieldNumber;
const int Equipment::kTreadmillFieldNumber;
const int Equipment::kRowingMachineFieldNumber;
#endif  // !_MSC_VER

Equipment::Equipment()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.Equipment)
}

void Equipment::InitAsDefaultInstance() {
  _is_default_instance_ = true;
  Equipment_default_oneof_instance_->treadmill_ = const_cast< ::proto::Equipment_Treadmill*>(&::proto::Equipment_Treadmill::default_instance());
  Equipment_default_oneof_instance_->rowingmachine_ = const_cast< ::proto::Equipment_RowingMachine*>(&::proto::Equipment_RowingMachine::default_instance());
}

Equipment::Equipment(const Equipment& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:proto.Equipment)
}

void Equipment::SharedCtor() {
    _is_default_instance_ = false;
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  date_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  id_ = 0;
  clear_has_EquipmentType();
}

Equipment::~Equipment() {
  // @@protoc_insertion_point(destructor:proto.Equipment)
  SharedDtor();
}

void Equipment::SharedDtor() {
  name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  date_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (has_EquipmentType()) {
    clear_EquipmentType();
  }
  if (this != default_instance_) {
  }
}

void Equipment::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Equipment::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Equipment_descriptor_;
}

const Equipment& Equipment::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_EquipmentManager_2eproto();
  return *default_instance_;
}

Equipment* Equipment::default_instance_ = NULL;

Equipment* Equipment::New(::google::protobuf::Arena* arena) const {
  Equipment* n = new Equipment;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Equipment::clear_EquipmentType() {
  switch(EquipmentType_case()) {
    case kTreadmill: {
      delete EquipmentType_.treadmill_;
      break;
    }
    case kRowingMachine: {
      delete EquipmentType_.rowingmachine_;
      break;
    }
    case EQUIPMENTTYPE_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = EQUIPMENTTYPE_NOT_SET;
}


void Equipment::Clear() {
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  date_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  id_ = 0;
  clear_EquipmentType();
}

bool Equipment::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.Equipment)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string name = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "proto.Equipment.name"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_date;
        break;
      }

      // optional string date = 2;
      case 2: {
        if (tag == 18) {
         parse_date:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_date()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->date().data(), this->date().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "proto.Equipment.date"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_id;
        break;
      }

      // optional int32 id = 3;
      case 3: {
        if (tag == 24) {
         parse_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &id_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_treadmill;
        break;
      }

      // optional .proto.Equipment.Treadmill treadmill = 4;
      case 4: {
        if (tag == 34) {
         parse_treadmill:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_treadmill()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_rowingMachine;
        break;
      }

      // optional .proto.Equipment.RowingMachine rowingMachine = 5;
      case 5: {
        if (tag == 42) {
         parse_rowingMachine:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_rowingmachine()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.Equipment)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.Equipment)
  return false;
#undef DO_
}

void Equipment::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.Equipment)
  // optional string name = 1;
  if (this->name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "proto.Equipment.name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->name(), output);
  }

  // optional string date = 2;
  if (this->date().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->date().data(), this->date().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "proto.Equipment.date");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->date(), output);
  }

  // optional int32 id = 3;
  if (this->id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->id(), output);
  }

  // optional .proto.Equipment.Treadmill treadmill = 4;
  if (has_treadmill()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, *EquipmentType_.treadmill_, output);
  }

  // optional .proto.Equipment.RowingMachine rowingMachine = 5;
  if (has_rowingmachine()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, *EquipmentType_.rowingmachine_, output);
  }

  // @@protoc_insertion_point(serialize_end:proto.Equipment)
}

::google::protobuf::uint8* Equipment::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.Equipment)
  // optional string name = 1;
  if (this->name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "proto.Equipment.name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->name(), target);
  }

  // optional string date = 2;
  if (this->date().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->date().data(), this->date().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "proto.Equipment.date");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->date(), target);
  }

  // optional int32 id = 3;
  if (this->id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->id(), target);
  }

  // optional .proto.Equipment.Treadmill treadmill = 4;
  if (has_treadmill()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, *EquipmentType_.treadmill_, target);
  }

  // optional .proto.Equipment.RowingMachine rowingMachine = 5;
  if (has_rowingmachine()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        5, *EquipmentType_.rowingmachine_, target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:proto.Equipment)
  return target;
}

int Equipment::ByteSize() const {
  int total_size = 0;

  // optional string name = 1;
  if (this->name().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->name());
  }

  // optional string date = 2;
  if (this->date().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->date());
  }

  // optional int32 id = 3;
  if (this->id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->id());
  }

  switch (EquipmentType_case()) {
    // optional .proto.Equipment.Treadmill treadmill = 4;
    case kTreadmill: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *EquipmentType_.treadmill_);
      break;
    }
    // optional .proto.Equipment.RowingMachine rowingMachine = 5;
    case kRowingMachine: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *EquipmentType_.rowingmachine_);
      break;
    }
    case EQUIPMENTTYPE_NOT_SET: {
      break;
    }
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Equipment::MergeFrom(const ::google::protobuf::Message& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const Equipment* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const Equipment>(
          &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Equipment::MergeFrom(const Equipment& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  switch (from.EquipmentType_case()) {
    case kTreadmill: {
      mutable_treadmill()->::proto::Equipment_Treadmill::MergeFrom(from.treadmill());
      break;
    }
    case kRowingMachine: {
      mutable_rowingmachine()->::proto::Equipment_RowingMachine::MergeFrom(from.rowingmachine());
      break;
    }
    case EQUIPMENTTYPE_NOT_SET: {
      break;
    }
  }
  if (from.name().size() > 0) {

    name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
  if (from.date().size() > 0) {

    date_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.date_);
  }
  if (from.id() != 0) {
    set_id(from.id());
  }
}

void Equipment::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Equipment::CopyFrom(const Equipment& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Equipment::IsInitialized() const {

  return true;
}

void Equipment::Swap(Equipment* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Equipment::InternalSwap(Equipment* other) {
  name_.Swap(&other->name_);
  date_.Swap(&other->date_);
  std::swap(id_, other->id_);
  std::swap(EquipmentType_, other->EquipmentType_);
  std::swap(_oneof_case_[0], other->_oneof_case_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Equipment::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Equipment_descriptor_;
  metadata.reflection = Equipment_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// Equipment_Treadmill

// optional float distance = 1;
void Equipment_Treadmill::clear_distance() {
  distance_ = 0;
}
 float Equipment_Treadmill::distance() const {
  // @@protoc_insertion_point(field_get:proto.Equipment.Treadmill.distance)
  return distance_;
}
 void Equipment_Treadmill::set_distance(float value) {
  
  distance_ = value;
  // @@protoc_insertion_point(field_set:proto.Equipment.Treadmill.distance)
}

// optional float avgSpeed = 2;
void Equipment_Treadmill::clear_avgspeed() {
  avgspeed_ = 0;
}
 float Equipment_Treadmill::avgspeed() const {
  // @@protoc_insertion_point(field_get:proto.Equipment.Treadmill.avgSpeed)
  return avgspeed_;
}
 void Equipment_Treadmill::set_avgspeed(float value) {
  
  avgspeed_ = value;
  // @@protoc_insertion_point(field_set:proto.Equipment.Treadmill.avgSpeed)
}

// -------------------------------------------------------------------

// Equipment_RowingMachine

// optional float duration = 1;
void Equipment_RowingMachine::clear_duration() {
  duration_ = 0;
}
 float Equipment_RowingMachine::duration() const {
  // @@protoc_insertion_point(field_get:proto.Equipment.RowingMachine.duration)
  return duration_;
}
 void Equipment_RowingMachine::set_duration(float value) {
  
  duration_ = value;
  // @@protoc_insertion_point(field_set:proto.Equipment.RowingMachine.duration)
}

// optional float repsPerMin = 2;
void Equipment_RowingMachine::clear_repspermin() {
  repspermin_ = 0;
}
 float Equipment_RowingMachine::repspermin() const {
  // @@protoc_insertion_point(field_get:proto.Equipment.RowingMachine.repsPerMin)
  return repspermin_;
}
 void Equipment_RowingMachine::set_repspermin(float value) {
  
  repspermin_ = value;
  // @@protoc_insertion_point(field_set:proto.Equipment.RowingMachine.repsPerMin)
}

// -------------------------------------------------------------------

// Equipment

// optional string name = 1;
void Equipment::clear_name() {
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 const ::std::string& Equipment::name() const {
  // @@protoc_insertion_point(field_get:proto.Equipment.name)
  return name_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void Equipment::set_name(const ::std::string& value) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:proto.Equipment.name)
}
 void Equipment::set_name(const char* value) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:proto.Equipment.name)
}
 void Equipment::set_name(const char* value, size_t size) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:proto.Equipment.name)
}
 ::std::string* Equipment::mutable_name() {
  
  // @@protoc_insertion_point(field_mutable:proto.Equipment.name)
  return name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* Equipment::release_name() {
  
  return name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void Equipment::set_allocated_name(::std::string* name) {
  if (name != NULL) {
    
  } else {
    
  }
  name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:proto.Equipment.name)
}

// optional string date = 2;
void Equipment::clear_date() {
  date_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 const ::std::string& Equipment::date() const {
  // @@protoc_insertion_point(field_get:proto.Equipment.date)
  return date_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void Equipment::set_date(const ::std::string& value) {
  
  date_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:proto.Equipment.date)
}
 void Equipment::set_date(const char* value) {
  
  date_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:proto.Equipment.date)
}
 void Equipment::set_date(const char* value, size_t size) {
  
  date_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:proto.Equipment.date)
}
 ::std::string* Equipment::mutable_date() {
  
  // @@protoc_insertion_point(field_mutable:proto.Equipment.date)
  return date_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* Equipment::release_date() {
  
  return date_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void Equipment::set_allocated_date(::std::string* date) {
  if (date != NULL) {
    
  } else {
    
  }
  date_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), date);
  // @@protoc_insertion_point(field_set_allocated:proto.Equipment.date)
}

// optional int32 id = 3;
void Equipment::clear_id() {
  id_ = 0;
}
 ::google::protobuf::int32 Equipment::id() const {
  // @@protoc_insertion_point(field_get:proto.Equipment.id)
  return id_;
}
 void Equipment::set_id(::google::protobuf::int32 value) {
  
  id_ = value;
  // @@protoc_insertion_point(field_set:proto.Equipment.id)
}

// optional .proto.Equipment.Treadmill treadmill = 4;
bool Equipment::has_treadmill() const {
  return EquipmentType_case() == kTreadmill;
}
void Equipment::set_has_treadmill() {
  _oneof_case_[0] = kTreadmill;
}
void Equipment::clear_treadmill() {
  if (has_treadmill()) {
    delete EquipmentType_.treadmill_;
    clear_has_EquipmentType();
  }
}
 const ::proto::Equipment_Treadmill& Equipment::treadmill() const {
  // @@protoc_insertion_point(field_get:proto.Equipment.treadmill)
  return has_treadmill()
      ? *EquipmentType_.treadmill_
      : ::proto::Equipment_Treadmill::default_instance();
}
::proto::Equipment_Treadmill* Equipment::mutable_treadmill() {
  if (!has_treadmill()) {
    clear_EquipmentType();
    set_has_treadmill();
    EquipmentType_.treadmill_ = new ::proto::Equipment_Treadmill;
  }
  // @@protoc_insertion_point(field_mutable:proto.Equipment.treadmill)
  return EquipmentType_.treadmill_;
}
::proto::Equipment_Treadmill* Equipment::release_treadmill() {
  if (has_treadmill()) {
    clear_has_EquipmentType();
    ::proto::Equipment_Treadmill* temp = EquipmentType_.treadmill_;
    EquipmentType_.treadmill_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
void Equipment::set_allocated_treadmill(::proto::Equipment_Treadmill* treadmill) {
  clear_EquipmentType();
  if (treadmill) {
    set_has_treadmill();
    EquipmentType_.treadmill_ = treadmill;
  }
  // @@protoc_insertion_point(field_set_allocated:proto.Equipment.treadmill)
}

// optional .proto.Equipment.RowingMachine rowingMachine = 5;
bool Equipment::has_rowingmachine() const {
  return EquipmentType_case() == kRowingMachine;
}
void Equipment::set_has_rowingmachine() {
  _oneof_case_[0] = kRowingMachine;
}
void Equipment::clear_rowingmachine() {
  if (has_rowingmachine()) {
    delete EquipmentType_.rowingmachine_;
    clear_has_EquipmentType();
  }
}
 const ::proto::Equipment_RowingMachine& Equipment::rowingmachine() const {
  // @@protoc_insertion_point(field_get:proto.Equipment.rowingMachine)
  return has_rowingmachine()
      ? *EquipmentType_.rowingmachine_
      : ::proto::Equipment_RowingMachine::default_instance();
}
::proto::Equipment_RowingMachine* Equipment::mutable_rowingmachine() {
  if (!has_rowingmachine()) {
    clear_EquipmentType();
    set_has_rowingmachine();
    EquipmentType_.rowingmachine_ = new ::proto::Equipment_RowingMachine;
  }
  // @@protoc_insertion_point(field_mutable:proto.Equipment.rowingMachine)
  return EquipmentType_.rowingmachine_;
}
::proto::Equipment_RowingMachine* Equipment::release_rowingmachine() {
  if (has_rowingmachine()) {
    clear_has_EquipmentType();
    ::proto::Equipment_RowingMachine* temp = EquipmentType_.rowingmachine_;
    EquipmentType_.rowingmachine_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
void Equipment::set_allocated_rowingmachine(::proto::Equipment_RowingMachine* rowingmachine) {
  clear_EquipmentType();
  if (rowingmachine) {
    set_has_rowingmachine();
    EquipmentType_.rowingmachine_ = rowingmachine;
  }
  // @@protoc_insertion_point(field_set_allocated:proto.Equipment.rowingMachine)
}

bool Equipment::has_EquipmentType() const {
  return EquipmentType_case() != EQUIPMENTTYPE_NOT_SET;
}
void Equipment::clear_has_EquipmentType() {
  _oneof_case_[0] = EQUIPMENTTYPE_NOT_SET;
}
Equipment::EquipmentTypeCase Equipment::EquipmentType_case() const {
  return Equipment::EquipmentTypeCase(_oneof_case_[0]);
}
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#ifndef _MSC_VER
const int EquipmentCache::kEquipmentFieldNumber;
#endif  // !_MSC_VER

EquipmentCache::EquipmentCache()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.EquipmentCache)
}

void EquipmentCache::InitAsDefaultInstance() {
  _is_default_instance_ = true;
}

EquipmentCache::EquipmentCache(const EquipmentCache& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:proto.EquipmentCache)
}

void EquipmentCache::SharedCtor() {
    _is_default_instance_ = false;
  _cached_size_ = 0;
}

EquipmentCache::~EquipmentCache() {
  // @@protoc_insertion_point(destructor:proto.EquipmentCache)
  SharedDtor();
}

void EquipmentCache::SharedDtor() {
  if (this != default_instance_) {
  }
}

void EquipmentCache::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* EquipmentCache::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return EquipmentCache_descriptor_;
}

const EquipmentCache& EquipmentCache::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_EquipmentManager_2eproto();
  return *default_instance_;
}

EquipmentCache* EquipmentCache::default_instance_ = NULL;

EquipmentCache* EquipmentCache::New(::google::protobuf::Arena* arena) const {
  EquipmentCache* n = new EquipmentCache;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void EquipmentCache::Clear() {
  equipment_.Clear();
}

bool EquipmentCache::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.EquipmentCache)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .proto.Equipment equipment = 1;
      case 1: {
        if (tag == 10) {
          DO_(input->IncrementRecursionDepth());
         parse_loop_equipment:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_equipment()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(10)) goto parse_loop_equipment;
        input->UnsafeDecrementRecursionDepth();
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.EquipmentCache)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.EquipmentCache)
  return false;
#undef DO_
}

void EquipmentCache::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.EquipmentCache)
  // repeated .proto.Equipment equipment = 1;
  for (unsigned int i = 0, n = this->equipment_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->equipment(i), output);
  }

  // @@protoc_insertion_point(serialize_end:proto.EquipmentCache)
}

::google::protobuf::uint8* EquipmentCache::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.EquipmentCache)
  // repeated .proto.Equipment equipment = 1;
  for (unsigned int i = 0, n = this->equipment_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->equipment(i), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:proto.EquipmentCache)
  return target;
}

int EquipmentCache::ByteSize() const {
  int total_size = 0;

  // repeated .proto.Equipment equipment = 1;
  total_size += 1 * this->equipment_size();
  for (int i = 0; i < this->equipment_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->equipment(i));
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void EquipmentCache::MergeFrom(const ::google::protobuf::Message& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const EquipmentCache* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const EquipmentCache>(
          &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void EquipmentCache::MergeFrom(const EquipmentCache& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  equipment_.MergeFrom(from.equipment_);
}

void EquipmentCache::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void EquipmentCache::CopyFrom(const EquipmentCache& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool EquipmentCache::IsInitialized() const {

  return true;
}

void EquipmentCache::Swap(EquipmentCache* other) {
  if (other == this) return;
  InternalSwap(other);
}
void EquipmentCache::InternalSwap(EquipmentCache* other) {
  equipment_.UnsafeArenaSwap(&other->equipment_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata EquipmentCache::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = EquipmentCache_descriptor_;
  metadata.reflection = EquipmentCache_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// EquipmentCache

// repeated .proto.Equipment equipment = 1;
int EquipmentCache::equipment_size() const {
  return equipment_.size();
}
void EquipmentCache::clear_equipment() {
  equipment_.Clear();
}
const ::proto::Equipment& EquipmentCache::equipment(int index) const {
  // @@protoc_insertion_point(field_get:proto.EquipmentCache.equipment)
  return equipment_.Get(index);
}
::proto::Equipment* EquipmentCache::mutable_equipment(int index) {
  // @@protoc_insertion_point(field_mutable:proto.EquipmentCache.equipment)
  return equipment_.Mutable(index);
}
::proto::Equipment* EquipmentCache::add_equipment() {
  // @@protoc_insertion_point(field_add:proto.EquipmentCache.equipment)
  return equipment_.Add();
}
::google::protobuf::RepeatedPtrField< ::proto::Equipment >*
EquipmentCache::mutable_equipment() {
  // @@protoc_insertion_point(field_mutable_list:proto.EquipmentCache.equipment)
  return &equipment_;
}
const ::google::protobuf::RepeatedPtrField< ::proto::Equipment >&
EquipmentCache::equipment() const {
  // @@protoc_insertion_point(field_list:proto.EquipmentCache.equipment)
  return equipment_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

}  // namespace proto

// @@protoc_insertion_point(global_scope)
