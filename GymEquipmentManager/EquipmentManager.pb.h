// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: EquipmentManager.proto

#ifndef PROTOBUF_EquipmentManager_2eproto__INCLUDED
#define PROTOBUF_EquipmentManager_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2006000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2006001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)

namespace proto {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_EquipmentManager_2eproto();
void protobuf_AssignDesc_EquipmentManager_2eproto();
void protobuf_ShutdownFile_EquipmentManager_2eproto();

class Equipment;
class Equipment_Treadmill;
class Equipment_RowingMachine;
class EquipmentCache;

// ===================================================================

class Equipment_Treadmill : public ::google::protobuf::Message {
 public:
  Equipment_Treadmill();
  virtual ~Equipment_Treadmill();

  Equipment_Treadmill(const Equipment_Treadmill& from);

  inline Equipment_Treadmill& operator=(const Equipment_Treadmill& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Equipment_Treadmill& default_instance();

  void Swap(Equipment_Treadmill* other);

  // implements Message ----------------------------------------------

  Equipment_Treadmill* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Equipment_Treadmill& from);
  void MergeFrom(const Equipment_Treadmill& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required float distance = 1;
  inline bool has_distance() const;
  inline void clear_distance();
  static const int kDistanceFieldNumber = 1;
  inline float distance() const;
  inline void set_distance(float value);

  // required float avgSpeed = 2;
  inline bool has_avgspeed() const;
  inline void clear_avgspeed();
  static const int kAvgSpeedFieldNumber = 2;
  inline float avgspeed() const;
  inline void set_avgspeed(float value);

  // @@protoc_insertion_point(class_scope:proto.Equipment.Treadmill)
 private:
  inline void set_has_distance();
  inline void clear_has_distance();
  inline void set_has_avgspeed();
  inline void clear_has_avgspeed();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  float distance_;
  float avgspeed_;
  friend void  protobuf_AddDesc_EquipmentManager_2eproto();
  friend void protobuf_AssignDesc_EquipmentManager_2eproto();
  friend void protobuf_ShutdownFile_EquipmentManager_2eproto();

  void InitAsDefaultInstance();
  static Equipment_Treadmill* default_instance_;
};
// -------------------------------------------------------------------

class Equipment_RowingMachine : public ::google::protobuf::Message {
 public:
  Equipment_RowingMachine();
  virtual ~Equipment_RowingMachine();

  Equipment_RowingMachine(const Equipment_RowingMachine& from);

  inline Equipment_RowingMachine& operator=(const Equipment_RowingMachine& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Equipment_RowingMachine& default_instance();

  void Swap(Equipment_RowingMachine* other);

  // implements Message ----------------------------------------------

  Equipment_RowingMachine* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Equipment_RowingMachine& from);
  void MergeFrom(const Equipment_RowingMachine& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required float duration = 1;
  inline bool has_duration() const;
  inline void clear_duration();
  static const int kDurationFieldNumber = 1;
  inline float duration() const;
  inline void set_duration(float value);

  // required float repsPerMin = 2;
  inline bool has_repspermin() const;
  inline void clear_repspermin();
  static const int kRepsPerMinFieldNumber = 2;
  inline float repspermin() const;
  inline void set_repspermin(float value);

  // @@protoc_insertion_point(class_scope:proto.Equipment.RowingMachine)
 private:
  inline void set_has_duration();
  inline void clear_has_duration();
  inline void set_has_repspermin();
  inline void clear_has_repspermin();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  float duration_;
  float repspermin_;
  friend void  protobuf_AddDesc_EquipmentManager_2eproto();
  friend void protobuf_AssignDesc_EquipmentManager_2eproto();
  friend void protobuf_ShutdownFile_EquipmentManager_2eproto();

  void InitAsDefaultInstance();
  static Equipment_RowingMachine* default_instance_;
};
// -------------------------------------------------------------------

class Equipment : public ::google::protobuf::Message {
 public:
  Equipment();
  virtual ~Equipment();

  Equipment(const Equipment& from);

  inline Equipment& operator=(const Equipment& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Equipment& default_instance();

  enum EquipmentTypeCase {
    kTreadmill = 4,
    kRowingMachine = 5,
    EQUIPMENTTYPE_NOT_SET = 0,
  };

  void Swap(Equipment* other);

  // implements Message ----------------------------------------------

  Equipment* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Equipment& from);
  void MergeFrom(const Equipment& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef Equipment_Treadmill Treadmill;
  typedef Equipment_RowingMachine RowingMachine;

  // accessors -------------------------------------------------------

  // required string name = 1;
  inline bool has_name() const;
  inline void clear_name();
  static const int kNameFieldNumber = 1;
  inline const ::std::string& name() const;
  inline void set_name(const ::std::string& value);
  inline void set_name(const char* value);
  inline void set_name(const char* value, size_t size);
  inline ::std::string* mutable_name();
  inline ::std::string* release_name();
  inline void set_allocated_name(::std::string* name);

  // required string date = 2;
  inline bool has_date() const;
  inline void clear_date();
  static const int kDateFieldNumber = 2;
  inline const ::std::string& date() const;
  inline void set_date(const ::std::string& value);
  inline void set_date(const char* value);
  inline void set_date(const char* value, size_t size);
  inline ::std::string* mutable_date();
  inline ::std::string* release_date();
  inline void set_allocated_date(::std::string* date);

  // required int32 id = 3;
  inline bool has_id() const;
  inline void clear_id();
  static const int kIdFieldNumber = 3;
  inline ::google::protobuf::int32 id() const;
  inline void set_id(::google::protobuf::int32 value);

  // optional .proto.Equipment.Treadmill treadmill = 4;
  inline bool has_treadmill() const;
  inline void clear_treadmill();
  static const int kTreadmillFieldNumber = 4;
  inline const ::proto::Equipment_Treadmill& treadmill() const;
  inline ::proto::Equipment_Treadmill* mutable_treadmill();
  inline ::proto::Equipment_Treadmill* release_treadmill();
  inline void set_allocated_treadmill(::proto::Equipment_Treadmill* treadmill);

  // optional .proto.Equipment.RowingMachine rowingMachine = 5;
  inline bool has_rowingmachine() const;
  inline void clear_rowingmachine();
  static const int kRowingMachineFieldNumber = 5;
  inline const ::proto::Equipment_RowingMachine& rowingmachine() const;
  inline ::proto::Equipment_RowingMachine* mutable_rowingmachine();
  inline ::proto::Equipment_RowingMachine* release_rowingmachine();
  inline void set_allocated_rowingmachine(::proto::Equipment_RowingMachine* rowingmachine);

  inline EquipmentTypeCase EquipmentType_case() const;
  // @@protoc_insertion_point(class_scope:proto.Equipment)
 private:
  inline void set_has_name();
  inline void clear_has_name();
  inline void set_has_date();
  inline void clear_has_date();
  inline void set_has_id();
  inline void clear_has_id();
  inline void set_has_treadmill();
  inline void set_has_rowingmachine();

  inline bool has_EquipmentType();
  void clear_EquipmentType();
  inline void clear_has_EquipmentType();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::std::string* name_;
  ::std::string* date_;
  ::google::protobuf::int32 id_;
  union EquipmentTypeUnion {
    ::proto::Equipment_Treadmill* treadmill_;
    ::proto::Equipment_RowingMachine* rowingmachine_;
  } EquipmentType_;
  ::google::protobuf::uint32 _oneof_case_[1];

  friend void  protobuf_AddDesc_EquipmentManager_2eproto();
  friend void protobuf_AssignDesc_EquipmentManager_2eproto();
  friend void protobuf_ShutdownFile_EquipmentManager_2eproto();

  void InitAsDefaultInstance();
  static Equipment* default_instance_;
};
// -------------------------------------------------------------------

class EquipmentCache : public ::google::protobuf::Message {
 public:
  EquipmentCache();
  virtual ~EquipmentCache();

  EquipmentCache(const EquipmentCache& from);

  inline EquipmentCache& operator=(const EquipmentCache& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const EquipmentCache& default_instance();

  void Swap(EquipmentCache* other);

  // implements Message ----------------------------------------------

  EquipmentCache* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const EquipmentCache& from);
  void MergeFrom(const EquipmentCache& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .proto.Equipment equipment = 1;
  inline int equipment_size() const;
  inline void clear_equipment();
  static const int kEquipmentFieldNumber = 1;
  inline const ::proto::Equipment& equipment(int index) const;
  inline ::proto::Equipment* mutable_equipment(int index);
  inline ::proto::Equipment* add_equipment();
  inline const ::google::protobuf::RepeatedPtrField< ::proto::Equipment >&
      equipment() const;
  inline ::google::protobuf::RepeatedPtrField< ::proto::Equipment >*
      mutable_equipment();

  // @@protoc_insertion_point(class_scope:proto.EquipmentCache)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::proto::Equipment > equipment_;
  friend void  protobuf_AddDesc_EquipmentManager_2eproto();
  friend void protobuf_AssignDesc_EquipmentManager_2eproto();
  friend void protobuf_ShutdownFile_EquipmentManager_2eproto();

  void InitAsDefaultInstance();
  static EquipmentCache* default_instance_;
};
// ===================================================================


// ===================================================================

// Equipment_Treadmill

// required float distance = 1;
inline bool Equipment_Treadmill::has_distance() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Equipment_Treadmill::set_has_distance() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Equipment_Treadmill::clear_has_distance() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Equipment_Treadmill::clear_distance() {
  distance_ = 0;
  clear_has_distance();
}
inline float Equipment_Treadmill::distance() const {
  // @@protoc_insertion_point(field_get:proto.Equipment.Treadmill.distance)
  return distance_;
}
inline void Equipment_Treadmill::set_distance(float value) {
  set_has_distance();
  distance_ = value;
  // @@protoc_insertion_point(field_set:proto.Equipment.Treadmill.distance)
}

// required float avgSpeed = 2;
inline bool Equipment_Treadmill::has_avgspeed() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Equipment_Treadmill::set_has_avgspeed() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Equipment_Treadmill::clear_has_avgspeed() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Equipment_Treadmill::clear_avgspeed() {
  avgspeed_ = 0;
  clear_has_avgspeed();
}
inline float Equipment_Treadmill::avgspeed() const {
  // @@protoc_insertion_point(field_get:proto.Equipment.Treadmill.avgSpeed)
  return avgspeed_;
}
inline void Equipment_Treadmill::set_avgspeed(float value) {
  set_has_avgspeed();
  avgspeed_ = value;
  // @@protoc_insertion_point(field_set:proto.Equipment.Treadmill.avgSpeed)
}

// -------------------------------------------------------------------

// Equipment_RowingMachine

// required float duration = 1;
inline bool Equipment_RowingMachine::has_duration() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Equipment_RowingMachine::set_has_duration() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Equipment_RowingMachine::clear_has_duration() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Equipment_RowingMachine::clear_duration() {
  duration_ = 0;
  clear_has_duration();
}
inline float Equipment_RowingMachine::duration() const {
  // @@protoc_insertion_point(field_get:proto.Equipment.RowingMachine.duration)
  return duration_;
}
inline void Equipment_RowingMachine::set_duration(float value) {
  set_has_duration();
  duration_ = value;
  // @@protoc_insertion_point(field_set:proto.Equipment.RowingMachine.duration)
}

// required float repsPerMin = 2;
inline bool Equipment_RowingMachine::has_repspermin() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Equipment_RowingMachine::set_has_repspermin() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Equipment_RowingMachine::clear_has_repspermin() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Equipment_RowingMachine::clear_repspermin() {
  repspermin_ = 0;
  clear_has_repspermin();
}
inline float Equipment_RowingMachine::repspermin() const {
  // @@protoc_insertion_point(field_get:proto.Equipment.RowingMachine.repsPerMin)
  return repspermin_;
}
inline void Equipment_RowingMachine::set_repspermin(float value) {
  set_has_repspermin();
  repspermin_ = value;
  // @@protoc_insertion_point(field_set:proto.Equipment.RowingMachine.repsPerMin)
}

// -------------------------------------------------------------------

// Equipment

// required string name = 1;
inline bool Equipment::has_name() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Equipment::set_has_name() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Equipment::clear_has_name() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Equipment::clear_name() {
  if (name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    name_->clear();
  }
  clear_has_name();
}
inline const ::std::string& Equipment::name() const {
  // @@protoc_insertion_point(field_get:proto.Equipment.name)
  return *name_;
}
inline void Equipment::set_name(const ::std::string& value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    name_ = new ::std::string;
  }
  name_->assign(value);
  // @@protoc_insertion_point(field_set:proto.Equipment.name)
}
inline void Equipment::set_name(const char* value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    name_ = new ::std::string;
  }
  name_->assign(value);
  // @@protoc_insertion_point(field_set_char:proto.Equipment.name)
}
inline void Equipment::set_name(const char* value, size_t size) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    name_ = new ::std::string;
  }
  name_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:proto.Equipment.name)
}
inline ::std::string* Equipment::mutable_name() {
  set_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    name_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:proto.Equipment.name)
  return name_;
}
inline ::std::string* Equipment::release_name() {
  clear_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = name_;
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void Equipment::set_allocated_name(::std::string* name) {
  if (name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete name_;
  }
  if (name) {
    set_has_name();
    name_ = name;
  } else {
    clear_has_name();
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:proto.Equipment.name)
}

// required string date = 2;
inline bool Equipment::has_date() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Equipment::set_has_date() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Equipment::clear_has_date() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Equipment::clear_date() {
  if (date_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    date_->clear();
  }
  clear_has_date();
}
inline const ::std::string& Equipment::date() const {
  // @@protoc_insertion_point(field_get:proto.Equipment.date)
  return *date_;
}
inline void Equipment::set_date(const ::std::string& value) {
  set_has_date();
  if (date_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    date_ = new ::std::string;
  }
  date_->assign(value);
  // @@protoc_insertion_point(field_set:proto.Equipment.date)
}
inline void Equipment::set_date(const char* value) {
  set_has_date();
  if (date_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    date_ = new ::std::string;
  }
  date_->assign(value);
  // @@protoc_insertion_point(field_set_char:proto.Equipment.date)
}
inline void Equipment::set_date(const char* value, size_t size) {
  set_has_date();
  if (date_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    date_ = new ::std::string;
  }
  date_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:proto.Equipment.date)
}
inline ::std::string* Equipment::mutable_date() {
  set_has_date();
  if (date_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    date_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:proto.Equipment.date)
  return date_;
}
inline ::std::string* Equipment::release_date() {
  clear_has_date();
  if (date_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = date_;
    date_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void Equipment::set_allocated_date(::std::string* date) {
  if (date_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete date_;
  }
  if (date) {
    set_has_date();
    date_ = date;
  } else {
    clear_has_date();
    date_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:proto.Equipment.date)
}

// required int32 id = 3;
inline bool Equipment::has_id() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void Equipment::set_has_id() {
  _has_bits_[0] |= 0x00000004u;
}
inline void Equipment::clear_has_id() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void Equipment::clear_id() {
  id_ = 0;
  clear_has_id();
}
inline ::google::protobuf::int32 Equipment::id() const {
  // @@protoc_insertion_point(field_get:proto.Equipment.id)
  return id_;
}
inline void Equipment::set_id(::google::protobuf::int32 value) {
  set_has_id();
  id_ = value;
  // @@protoc_insertion_point(field_set:proto.Equipment.id)
}

// optional .proto.Equipment.Treadmill treadmill = 4;
inline bool Equipment::has_treadmill() const {
  return EquipmentType_case() == kTreadmill;
}
inline void Equipment::set_has_treadmill() {
  _oneof_case_[0] = kTreadmill;
}
inline void Equipment::clear_treadmill() {
  if (has_treadmill()) {
    delete EquipmentType_.treadmill_;
    clear_has_EquipmentType();
  }
}
inline const ::proto::Equipment_Treadmill& Equipment::treadmill() const {
  return has_treadmill() ? *EquipmentType_.treadmill_
                      : ::proto::Equipment_Treadmill::default_instance();
}
inline ::proto::Equipment_Treadmill* Equipment::mutable_treadmill() {
  if (!has_treadmill()) {
    clear_EquipmentType();
    set_has_treadmill();
    EquipmentType_.treadmill_ = new ::proto::Equipment_Treadmill;
  }
  return EquipmentType_.treadmill_;
}
inline ::proto::Equipment_Treadmill* Equipment::release_treadmill() {
  if (has_treadmill()) {
    clear_has_EquipmentType();
    ::proto::Equipment_Treadmill* temp = EquipmentType_.treadmill_;
    EquipmentType_.treadmill_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
inline void Equipment::set_allocated_treadmill(::proto::Equipment_Treadmill* treadmill) {
  clear_EquipmentType();
  if (treadmill) {
    set_has_treadmill();
    EquipmentType_.treadmill_ = treadmill;
  }
}

// optional .proto.Equipment.RowingMachine rowingMachine = 5;
inline bool Equipment::has_rowingmachine() const {
  return EquipmentType_case() == kRowingMachine;
}
inline void Equipment::set_has_rowingmachine() {
  _oneof_case_[0] = kRowingMachine;
}
inline void Equipment::clear_rowingmachine() {
  if (has_rowingmachine()) {
    delete EquipmentType_.rowingmachine_;
    clear_has_EquipmentType();
  }
}
inline const ::proto::Equipment_RowingMachine& Equipment::rowingmachine() const {
  return has_rowingmachine() ? *EquipmentType_.rowingmachine_
                      : ::proto::Equipment_RowingMachine::default_instance();
}
inline ::proto::Equipment_RowingMachine* Equipment::mutable_rowingmachine() {
  if (!has_rowingmachine()) {
    clear_EquipmentType();
    set_has_rowingmachine();
    EquipmentType_.rowingmachine_ = new ::proto::Equipment_RowingMachine;
  }
  return EquipmentType_.rowingmachine_;
}
inline ::proto::Equipment_RowingMachine* Equipment::release_rowingmachine() {
  if (has_rowingmachine()) {
    clear_has_EquipmentType();
    ::proto::Equipment_RowingMachine* temp = EquipmentType_.rowingmachine_;
    EquipmentType_.rowingmachine_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
inline void Equipment::set_allocated_rowingmachine(::proto::Equipment_RowingMachine* rowingmachine) {
  clear_EquipmentType();
  if (rowingmachine) {
    set_has_rowingmachine();
    EquipmentType_.rowingmachine_ = rowingmachine;
  }
}

inline bool Equipment::has_EquipmentType() {
  return EquipmentType_case() != EQUIPMENTTYPE_NOT_SET;
}
inline void Equipment::clear_has_EquipmentType() {
  _oneof_case_[0] = EQUIPMENTTYPE_NOT_SET;
}
inline Equipment::EquipmentTypeCase Equipment::EquipmentType_case() const {
  return Equipment::EquipmentTypeCase(_oneof_case_[0]);
}
// -------------------------------------------------------------------

// EquipmentCache

// repeated .proto.Equipment equipment = 1;
inline int EquipmentCache::equipment_size() const {
  return equipment_.size();
}
inline void EquipmentCache::clear_equipment() {
  equipment_.Clear();
}
inline const ::proto::Equipment& EquipmentCache::equipment(int index) const {
  // @@protoc_insertion_point(field_get:proto.EquipmentCache.equipment)
  return equipment_.Get(index);
}
inline ::proto::Equipment* EquipmentCache::mutable_equipment(int index) {
  // @@protoc_insertion_point(field_mutable:proto.EquipmentCache.equipment)
  return equipment_.Mutable(index);
}
inline ::proto::Equipment* EquipmentCache::add_equipment() {
  // @@protoc_insertion_point(field_add:proto.EquipmentCache.equipment)
  return equipment_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::proto::Equipment >&
EquipmentCache::equipment() const {
  // @@protoc_insertion_point(field_list:proto.EquipmentCache.equipment)
  return equipment_;
}
inline ::google::protobuf::RepeatedPtrField< ::proto::Equipment >*
EquipmentCache::mutable_equipment() {
  // @@protoc_insertion_point(field_mutable_list:proto.EquipmentCache.equipment)
  return &equipment_;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace proto

#ifndef SWIG
namespace google {
namespace protobuf {


}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_EquipmentManager_2eproto__INCLUDED
