// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: EquipmentManager.proto

#ifndef PROTOBUF_EquipmentManager_2eproto__INCLUDED
#define PROTOBUF_EquipmentManager_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3000000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3000000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)

// Internal implementation detail -- do not call these.
void protobuf_AddDesc_EquipmentManager_2eproto();
void protobuf_AssignDesc_EquipmentManager_2eproto();
void protobuf_ShutdownFile_EquipmentManager_2eproto();

class Equipment;
class EquipmentCache;
class RowingMachine;
class Treadmill;

// ===================================================================

class Treadmill : public ::google::protobuf::Message {
 public:
  Treadmill();
  virtual ~Treadmill();

  Treadmill(const Treadmill& from);

  inline Treadmill& operator=(const Treadmill& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Treadmill& default_instance();

  void Swap(Treadmill* other);

  // implements Message ----------------------------------------------

  inline Treadmill* New() const { return New(NULL); }

  Treadmill* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Treadmill& from);
  void MergeFrom(const Treadmill& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(Treadmill* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional float distance = 1;
  void clear_distance();
  static const int kDistanceFieldNumber = 1;
  float distance() const;
  void set_distance(float value);

  // optional float avgSpeed = 2;
  void clear_avgspeed();
  static const int kAvgSpeedFieldNumber = 2;
  float avgspeed() const;
  void set_avgspeed(float value);

  // @@protoc_insertion_point(class_scope:Treadmill)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  bool _is_default_instance_;
  float distance_;
  float avgspeed_;
  mutable int _cached_size_;
  friend void  protobuf_AddDesc_EquipmentManager_2eproto();
  friend void protobuf_AssignDesc_EquipmentManager_2eproto();
  friend void protobuf_ShutdownFile_EquipmentManager_2eproto();

  void InitAsDefaultInstance();
  static Treadmill* default_instance_;
};
// -------------------------------------------------------------------

class RowingMachine : public ::google::protobuf::Message {
 public:
  RowingMachine();
  virtual ~RowingMachine();

  RowingMachine(const RowingMachine& from);

  inline RowingMachine& operator=(const RowingMachine& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const RowingMachine& default_instance();

  void Swap(RowingMachine* other);

  // implements Message ----------------------------------------------

  inline RowingMachine* New() const { return New(NULL); }

  RowingMachine* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const RowingMachine& from);
  void MergeFrom(const RowingMachine& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(RowingMachine* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional float duration = 1;
  void clear_duration();
  static const int kDurationFieldNumber = 1;
  float duration() const;
  void set_duration(float value);

  // optional float repsPerMin = 2;
  void clear_repspermin();
  static const int kRepsPerMinFieldNumber = 2;
  float repspermin() const;
  void set_repspermin(float value);

  // @@protoc_insertion_point(class_scope:RowingMachine)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  bool _is_default_instance_;
  float duration_;
  float repspermin_;
  mutable int _cached_size_;
  friend void  protobuf_AddDesc_EquipmentManager_2eproto();
  friend void protobuf_AssignDesc_EquipmentManager_2eproto();
  friend void protobuf_ShutdownFile_EquipmentManager_2eproto();

  void InitAsDefaultInstance();
  static RowingMachine* default_instance_;
};
// -------------------------------------------------------------------

class Equipment : public ::google::protobuf::Message {
 public:
  Equipment();
  virtual ~Equipment();

  Equipment(const Equipment& from);

  inline Equipment& operator=(const Equipment& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Equipment& default_instance();

  enum EquipmentTypeCase {
    kTreadmill = 4,
    kRowingMachine = 5,
    EQUIPMENTTYPE_NOT_SET = 0,
  };

  void Swap(Equipment* other);

  // implements Message ----------------------------------------------

  inline Equipment* New() const { return New(NULL); }

  Equipment* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Equipment& from);
  void MergeFrom(const Equipment& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(Equipment* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string name = 1;
  void clear_name();
  static const int kNameFieldNumber = 1;
  const ::std::string& name() const;
  void set_name(const ::std::string& value);
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  ::std::string* mutable_name();
  ::std::string* release_name();
  void set_allocated_name(::std::string* name);

  // optional string date = 2;
  void clear_date();
  static const int kDateFieldNumber = 2;
  const ::std::string& date() const;
  void set_date(const ::std::string& value);
  void set_date(const char* value);
  void set_date(const char* value, size_t size);
  ::std::string* mutable_date();
  ::std::string* release_date();
  void set_allocated_date(::std::string* date);

  // optional .Treadmill treadmill = 4;
  bool has_treadmill() const;
  void clear_treadmill();
  static const int kTreadmillFieldNumber = 4;
  const ::Treadmill& treadmill() const;
  ::Treadmill* mutable_treadmill();
  ::Treadmill* release_treadmill();
  void set_allocated_treadmill(::Treadmill* treadmill);

  // optional .RowingMachine rowingMachine = 5;
  bool has_rowingmachine() const;
  void clear_rowingmachine();
  static const int kRowingMachineFieldNumber = 5;
  const ::RowingMachine& rowingmachine() const;
  ::RowingMachine* mutable_rowingmachine();
  ::RowingMachine* release_rowingmachine();
  void set_allocated_rowingmachine(::RowingMachine* rowingmachine);

  EquipmentTypeCase EquipmentType_case() const;
  // @@protoc_insertion_point(class_scope:Equipment)
 private:
  inline void set_has_treadmill();
  inline void set_has_rowingmachine();

  inline bool has_EquipmentType() const;
  void clear_EquipmentType();
  inline void clear_has_EquipmentType();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  bool _is_default_instance_;
  ::google::protobuf::internal::ArenaStringPtr name_;
  ::google::protobuf::internal::ArenaStringPtr date_;
  union EquipmentTypeUnion {
    EquipmentTypeUnion() {}
    ::Treadmill* treadmill_;
    ::RowingMachine* rowingmachine_;
  } EquipmentType_;
  mutable int _cached_size_;
  ::google::protobuf::uint32 _oneof_case_[1];

  friend void  protobuf_AddDesc_EquipmentManager_2eproto();
  friend void protobuf_AssignDesc_EquipmentManager_2eproto();
  friend void protobuf_ShutdownFile_EquipmentManager_2eproto();

  void InitAsDefaultInstance();
  static Equipment* default_instance_;
};
// -------------------------------------------------------------------

class EquipmentCache : public ::google::protobuf::Message {
 public:
  EquipmentCache();
  virtual ~EquipmentCache();

  EquipmentCache(const EquipmentCache& from);

  inline EquipmentCache& operator=(const EquipmentCache& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const EquipmentCache& default_instance();

  void Swap(EquipmentCache* other);

  // implements Message ----------------------------------------------

  inline EquipmentCache* New() const { return New(NULL); }

  EquipmentCache* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const EquipmentCache& from);
  void MergeFrom(const EquipmentCache& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(EquipmentCache* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .Equipment equipment = 1;
  int equipment_size() const;
  void clear_equipment();
  static const int kEquipmentFieldNumber = 1;
  const ::Equipment& equipment(int index) const;
  ::Equipment* mutable_equipment(int index);
  ::Equipment* add_equipment();
  ::google::protobuf::RepeatedPtrField< ::Equipment >*
      mutable_equipment();
  const ::google::protobuf::RepeatedPtrField< ::Equipment >&
      equipment() const;

  // @@protoc_insertion_point(class_scope:EquipmentCache)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  bool _is_default_instance_;
  ::google::protobuf::RepeatedPtrField< ::Equipment > equipment_;
  mutable int _cached_size_;
  friend void  protobuf_AddDesc_EquipmentManager_2eproto();
  friend void protobuf_AssignDesc_EquipmentManager_2eproto();
  friend void protobuf_ShutdownFile_EquipmentManager_2eproto();

  void InitAsDefaultInstance();
  static EquipmentCache* default_instance_;
};
// ===================================================================


// ===================================================================

#if !PROTOBUF_INLINE_NOT_IN_HEADERS
// Treadmill

// optional float distance = 1;
inline void Treadmill::clear_distance() {
  distance_ = 0;
}
inline float Treadmill::distance() const {
  // @@protoc_insertion_point(field_get:Treadmill.distance)
  return distance_;
}
inline void Treadmill::set_distance(float value) {
  
  distance_ = value;
  // @@protoc_insertion_point(field_set:Treadmill.distance)
}

// optional float avgSpeed = 2;
inline void Treadmill::clear_avgspeed() {
  avgspeed_ = 0;
}
inline float Treadmill::avgspeed() const {
  // @@protoc_insertion_point(field_get:Treadmill.avgSpeed)
  return avgspeed_;
}
inline void Treadmill::set_avgspeed(float value) {
  
  avgspeed_ = value;
  // @@protoc_insertion_point(field_set:Treadmill.avgSpeed)
}

// -------------------------------------------------------------------

// RowingMachine

// optional float duration = 1;
inline void RowingMachine::clear_duration() {
  duration_ = 0;
}
inline float RowingMachine::duration() const {
  // @@protoc_insertion_point(field_get:RowingMachine.duration)
  return duration_;
}
inline void RowingMachine::set_duration(float value) {
  
  duration_ = value;
  // @@protoc_insertion_point(field_set:RowingMachine.duration)
}

// optional float repsPerMin = 2;
inline void RowingMachine::clear_repspermin() {
  repspermin_ = 0;
}
inline float RowingMachine::repspermin() const {
  // @@protoc_insertion_point(field_get:RowingMachine.repsPerMin)
  return repspermin_;
}
inline void RowingMachine::set_repspermin(float value) {
  
  repspermin_ = value;
  // @@protoc_insertion_point(field_set:RowingMachine.repsPerMin)
}

// -------------------------------------------------------------------

// Equipment

// optional string name = 1;
inline void Equipment::clear_name() {
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Equipment::name() const {
  // @@protoc_insertion_point(field_get:Equipment.name)
  return name_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Equipment::set_name(const ::std::string& value) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:Equipment.name)
}
inline void Equipment::set_name(const char* value) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Equipment.name)
}
inline void Equipment::set_name(const char* value, size_t size) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Equipment.name)
}
inline ::std::string* Equipment::mutable_name() {
  
  // @@protoc_insertion_point(field_mutable:Equipment.name)
  return name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Equipment::release_name() {
  
  return name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Equipment::set_allocated_name(::std::string* name) {
  if (name != NULL) {
    
  } else {
    
  }
  name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:Equipment.name)
}

// optional string date = 2;
inline void Equipment::clear_date() {
  date_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Equipment::date() const {
  // @@protoc_insertion_point(field_get:Equipment.date)
  return date_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Equipment::set_date(const ::std::string& value) {
  
  date_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:Equipment.date)
}
inline void Equipment::set_date(const char* value) {
  
  date_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Equipment.date)
}
inline void Equipment::set_date(const char* value, size_t size) {
  
  date_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Equipment.date)
}
inline ::std::string* Equipment::mutable_date() {
  
  // @@protoc_insertion_point(field_mutable:Equipment.date)
  return date_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Equipment::release_date() {
  
  return date_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Equipment::set_allocated_date(::std::string* date) {
  if (date != NULL) {
    
  } else {
    
  }
  date_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), date);
  // @@protoc_insertion_point(field_set_allocated:Equipment.date)
}

// optional .Treadmill treadmill = 4;
inline bool Equipment::has_treadmill() const {
  return EquipmentType_case() == kTreadmill;
}
inline void Equipment::set_has_treadmill() {
  _oneof_case_[0] = kTreadmill;
}
inline void Equipment::clear_treadmill() {
  if (has_treadmill()) {
    delete EquipmentType_.treadmill_;
    clear_has_EquipmentType();
  }
}
inline  const ::Treadmill& Equipment::treadmill() const {
  // @@protoc_insertion_point(field_get:Equipment.treadmill)
  return has_treadmill()
      ? *EquipmentType_.treadmill_
      : ::Treadmill::default_instance();
}
inline ::Treadmill* Equipment::mutable_treadmill() {
  if (!has_treadmill()) {
    clear_EquipmentType();
    set_has_treadmill();
    EquipmentType_.treadmill_ = new ::Treadmill;
  }
  // @@protoc_insertion_point(field_mutable:Equipment.treadmill)
  return EquipmentType_.treadmill_;
}
inline ::Treadmill* Equipment::release_treadmill() {
  if (has_treadmill()) {
    clear_has_EquipmentType();
    ::Treadmill* temp = EquipmentType_.treadmill_;
    EquipmentType_.treadmill_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
inline void Equipment::set_allocated_treadmill(::Treadmill* treadmill) {
  clear_EquipmentType();
  if (treadmill) {
    set_has_treadmill();
    EquipmentType_.treadmill_ = treadmill;
  }
  // @@protoc_insertion_point(field_set_allocated:Equipment.treadmill)
}

// optional .RowingMachine rowingMachine = 5;
inline bool Equipment::has_rowingmachine() const {
  return EquipmentType_case() == kRowingMachine;
}
inline void Equipment::set_has_rowingmachine() {
  _oneof_case_[0] = kRowingMachine;
}
inline void Equipment::clear_rowingmachine() {
  if (has_rowingmachine()) {
    delete EquipmentType_.rowingmachine_;
    clear_has_EquipmentType();
  }
}
inline  const ::RowingMachine& Equipment::rowingmachine() const {
  // @@protoc_insertion_point(field_get:Equipment.rowingMachine)
  return has_rowingmachine()
      ? *EquipmentType_.rowingmachine_
      : ::RowingMachine::default_instance();
}
inline ::RowingMachine* Equipment::mutable_rowingmachine() {
  if (!has_rowingmachine()) {
    clear_EquipmentType();
    set_has_rowingmachine();
    EquipmentType_.rowingmachine_ = new ::RowingMachine;
  }
  // @@protoc_insertion_point(field_mutable:Equipment.rowingMachine)
  return EquipmentType_.rowingmachine_;
}
inline ::RowingMachine* Equipment::release_rowingmachine() {
  if (has_rowingmachine()) {
    clear_has_EquipmentType();
    ::RowingMachine* temp = EquipmentType_.rowingmachine_;
    EquipmentType_.rowingmachine_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
inline void Equipment::set_allocated_rowingmachine(::RowingMachine* rowingmachine) {
  clear_EquipmentType();
  if (rowingmachine) {
    set_has_rowingmachine();
    EquipmentType_.rowingmachine_ = rowingmachine;
  }
  // @@protoc_insertion_point(field_set_allocated:Equipment.rowingMachine)
}

inline bool Equipment::has_EquipmentType() const {
  return EquipmentType_case() != EQUIPMENTTYPE_NOT_SET;
}
inline void Equipment::clear_has_EquipmentType() {
  _oneof_case_[0] = EQUIPMENTTYPE_NOT_SET;
}
inline Equipment::EquipmentTypeCase Equipment::EquipmentType_case() const {
  return Equipment::EquipmentTypeCase(_oneof_case_[0]);
}
// -------------------------------------------------------------------

// EquipmentCache

// repeated .Equipment equipment = 1;
inline int EquipmentCache::equipment_size() const {
  return equipment_.size();
}
inline void EquipmentCache::clear_equipment() {
  equipment_.Clear();
}
inline const ::Equipment& EquipmentCache::equipment(int index) const {
  // @@protoc_insertion_point(field_get:EquipmentCache.equipment)
  return equipment_.Get(index);
}
inline ::Equipment* EquipmentCache::mutable_equipment(int index) {
  // @@protoc_insertion_point(field_mutable:EquipmentCache.equipment)
  return equipment_.Mutable(index);
}
inline ::Equipment* EquipmentCache::add_equipment() {
  // @@protoc_insertion_point(field_add:EquipmentCache.equipment)
  return equipment_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::Equipment >*
EquipmentCache::mutable_equipment() {
  // @@protoc_insertion_point(field_mutable_list:EquipmentCache.equipment)
  return &equipment_;
}
inline const ::google::protobuf::RepeatedPtrField< ::Equipment >&
EquipmentCache::equipment() const {
  // @@protoc_insertion_point(field_list:EquipmentCache.equipment)
  return equipment_;
}

#endif  // !PROTOBUF_INLINE_NOT_IN_HEADERS
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_EquipmentManager_2eproto__INCLUDED
